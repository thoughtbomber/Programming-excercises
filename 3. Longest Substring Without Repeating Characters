/* 

Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
Example 4:

Input: s = ""
Output: 0

*/

// The solution part

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_map<char, int> umap;
        int pos = 0, res = 0;
        
       // if (s.length() == 0) return 0;
        
        for (int i = 0; i < s.length(); i++)
        {
            if(umap.find(s[i]) != umap.end())
            {   
                res = max(res, i - pos);
                pos = max(pos, umap[s[i]] + 1);
                umap[s[i]] = i;
                 
            }
            else{
                umap[s[i]] = i;
            }            
        }
        
        res = max(res, int(s.length()) - pos);
        return res;
        
    }
};
